buildscript {
    repositories {
        maven {
            credentials {
                username mavenUsername
                password mavenPassword
            }
            url mavenRepository
        }
    }
    dependencies {
        //for the markdown conversion
        classpath 'nl.jworks.markdown_to_asciidoc:markdown_to_asciidoc:1.1'
    }
}

//tag::exportMarkdown[]
task exportMarkdown(
        description: 'exports all markdown files to AsciiDoc',
        group: 'docToolchain',
        type: Copy
) {
    doFirst {
    }
    doLast {
        logger.info("docToolchain > exportMarkdown: " + docDir)
        logger.info("docToolchain > exportMarkdown: " + mainConfigFile)
        def configFile = new File(docDir, mainConfigFile)
        def config = new ConfigSlurper().parse(configFile.text)
        def exportPath = ""
        def searchPath = ""
        if (!config.exportMarkdown.exportPath.isEmpty()) {
            exportPath = new File(docDir, config.exportMarkdown.exportPath).getAbsolutePath()
        } else {
            exportPath = new File(docDir, config.outputPath).getAbsolutePath()
        }
        if (!config.exportMarkdown.searchPath.isEmpty()) {
            searchPath = new File(docDir, config.exportMarkdown.searchPath).getAbsolutePath()
        } else {
            searchPath = new File(docDir, config.inputPath).getAbsolutePath()
        }
        logger.info("docToolchain > exportMarkdown: exportPath: " + exportPath)
        logger.info("docToolchain > exportMarkdown: searchPath: " + searchPath)
        from fileTree(searchPath).files  //ensure the files don't copy the directory structure

        include("**/*.md") //include only markdown files
        includeEmptyDirs = false
        rename(/(.+).md/, '$1.adoc') //rename all files from *.md to *.adoc
        filter(Markdown2AdocFilter) // convert the content of the files

        into exportPath //copy converted files back to source directory
    }
}

class Markdown2AdocFilter extends FilterReader {
    Markdown2AdocFilter(Reader input) {
        super(new StringReader(nl.jworks.markdown_to_asciidoc.Converter.convertMarkdownToAsciiDoc(input.text)))
    }
}
//end::exportMarkdown[]
